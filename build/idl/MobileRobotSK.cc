// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.

#include "MobileRobot.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_2;



void
RTC::OGMap::operator>>= (cdrStream &_n) const
{
  (const Time&) tm >>= _n;
  (const OGMapConfig&) config >>= _n;
  (const OGMapTile&) map >>= _n;

}

void
RTC::OGMap::operator<<= (cdrStream &_n)
{
  (Time&)tm <<= _n;
  (OGMapConfig&)config <<= _n;
  (OGMapTile&)map <<= _n;

}

RTC::OGMapper_ptr RTC::OGMapper_Helper::_nil() {
  return ::RTC::OGMapper::_nil();
}

::CORBA::Boolean RTC::OGMapper_Helper::is_nil(::RTC::OGMapper_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::OGMapper_Helper::release(::RTC::OGMapper_ptr p) {
  ::CORBA::release(p);
}

void RTC::OGMapper_Helper::marshalObjRef(::RTC::OGMapper_ptr obj, cdrStream& s) {
  ::RTC::OGMapper::_marshalObjRef(obj, s);
}

RTC::OGMapper_ptr RTC::OGMapper_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::OGMapper::_unmarshalObjRef(s);
}

void RTC::OGMapper_Helper::duplicate(::RTC::OGMapper_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

RTC::OGMapper_ptr
RTC::OGMapper::_duplicate(::RTC::OGMapper_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

RTC::OGMapper_ptr
RTC::OGMapper::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::OGMapper_ptr
RTC::OGMapper::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::OGMapper_ptr
RTC::OGMapper::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_OGMapper _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_OGMapper* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_OGMapper;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::OGMapper::_PD_repoId = "IDL:RTC/OGMapper:1.0";


RTC::_objref_OGMapper::~_objref_OGMapper() {
  
}


RTC::_objref_OGMapper::_objref_OGMapper(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::OGMapper::_PD_repoId, ior, id, 1)
   ,
   _shortcut(0)
{
  _PR_setobj(this);
}

void*
RTC::_objref_OGMapper::_ptrToObjRef(const char* id)
{
  if (id == ::RTC::OGMapper::_PD_repoId)
    return (::RTC::OGMapper_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::RTC::OGMapper::_PD_repoId))
    return (::RTC::OGMapper_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void
RTC::_objref_OGMapper::_enableShortcut(omniServant* _svt, const _CORBA_Boolean* _inv)
{
  if (_svt)
    _shortcut = (_impl_OGMapper*)_svt->_ptrToInterface(::RTC::OGMapper::_PD_repoId);
  else
    _shortcut = 0;
  _invalid  = _inv;
  
}


//
// Code for RTC::OGMapper::initializeMap

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE_i_cRTC_mOGMapConfig_i_cRTC_mPose2D
class _0RL_cd_be987840cb6721cf_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::OGMapConfig arg_0_;
  const RTC::OGMapConfig* arg_0;
  RTC::Pose2D arg_1_;
  const RTC::Pose2D* arg_1;
  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_00000000::marshalArguments(cdrStream& _n)
{
  (const RTC::OGMapConfig&) *arg_0 >>= _n;
  (const RTC::Pose2D&) *arg_1 >>= _n;

}

void _0RL_cd_be987840cb6721cf_00000000::unmarshalArguments(cdrStream& _n)
{
  (RTC::OGMapConfig&)arg_0_ <<= _n;
  arg_0 = &arg_0_;
  (RTC::Pose2D&)arg_1_ <<= _n;
  arg_1 = &arg_1_;

}

void _0RL_cd_be987840cb6721cf_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_be987840cb6721cf_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_00000000* tcd = (_0RL_cd_be987840cb6721cf_00000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->initializeMap(*tcd->arg_0, *tcd->arg_1);


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::initializeMap(const ::RTC::OGMapConfig& config, const ::RTC::Pose2D& initialPose)
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->initializeMap(config, initialPose);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_00000000 _call_desc(_0RL_lcfn_be987840cb6721cf_10000000, "initializeMap", 14);
  _call_desc.arg_0 = &(::RTC::OGMapConfig&) config;
  _call_desc.arg_1 = &(::RTC::Pose2D&) initialPose;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for RTC::OGMapper::startMapping

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE
class _0RL_cd_be987840cb6721cf_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_20000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_be987840cb6721cf_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_20000000* tcd = (_0RL_cd_be987840cb6721cf_20000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->startMapping();


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::startMapping()
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->startMapping();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_30000000, "startMapping", 13);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for RTC::OGMapper::stopMapping

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_20000000* tcd = (_0RL_cd_be987840cb6721cf_20000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->stopMapping();


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::stopMapping()
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->stopMapping();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_40000000, "stopMapping", 12);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for RTC::OGMapper::suspendMapping

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_20000000* tcd = (_0RL_cd_be987840cb6721cf_20000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->suspendMapping();


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::suspendMapping()
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->suspendMapping();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_50000000, "suspendMapping", 15);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for RTC::OGMapper::resumeMapping

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_20000000* tcd = (_0RL_cd_be987840cb6721cf_20000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->resumeMapping();


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::resumeMapping()
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->resumeMapping();
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_60000000, "resumeMapping", 14);


  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for RTC::OGMapper::getState

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE_o_cRTC_mMAPPER__STATE
class _0RL_cd_be987840cb6721cf_70000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_70000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::MAPPER_STATE arg_0;
  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_70000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  arg_0 >>= _n;

}

void _0RL_cd_be987840cb6721cf_70000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;
  (RTC::MAPPER_STATE&)arg_0 <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_70000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_80000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_70000000* tcd = (_0RL_cd_be987840cb6721cf_70000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->getState(tcd->arg_0);


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::getState(::RTC::MAPPER_STATE& state)
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->getState(state);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_70000000 _call_desc(_0RL_lcfn_be987840cb6721cf_80000000, "getState", 9);


  _invoke(_call_desc);
  state = _call_desc.arg_0;
  return _call_desc.result;


}


//
// Code for RTC::OGMapper::requestCurrentBuiltMap

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE_o_cRTC_mOGMap
class _0RL_cd_be987840cb6721cf_90000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_90000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::OGMap_var arg_0;
  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_90000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  (const RTC::OGMap&) arg_0 >>= _n;

}

void _0RL_cd_be987840cb6721cf_90000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;
  arg_0 = new RTC::OGMap;
  (RTC::OGMap&)arg_0 <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_90000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_90000000* tcd = (_0RL_cd_be987840cb6721cf_90000000*)cd;
  RTC::_impl_OGMapper* impl = (RTC::_impl_OGMapper*) svnt->_ptrToInterface(RTC::OGMapper::_PD_repoId);
  tcd->result = impl->requestCurrentBuiltMap(tcd->arg_0.out());


}

RTC::RETURN_VALUE RTC::_objref_OGMapper::requestCurrentBuiltMap(::RTC::OGMap_out map)
{
  _impl_OGMapper* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->requestCurrentBuiltMap(map);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_90000000 _call_desc(_0RL_lcfn_be987840cb6721cf_a0000000, "requestCurrentBuiltMap", 23);


  _invoke(_call_desc);
  map = _call_desc.arg_0._retn();
  return _call_desc.result;


}

RTC::_pof_OGMapper::~_pof_OGMapper() {}


omniObjRef*
RTC::_pof_OGMapper::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_OGMapper(ior, id);
}


::CORBA::Boolean
RTC::_pof_OGMapper::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::RTC::OGMapper::_PD_repoId))
    return 1;
  
  return 0;
}

const RTC::_pof_OGMapper _the_pof_RTC_mOGMapper;

RTC::_impl_OGMapper::~_impl_OGMapper() {}


::CORBA::Boolean
RTC::_impl_OGMapper::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "initializeMap")) {

    _0RL_cd_be987840cb6721cf_00000000 _call_desc(_0RL_lcfn_be987840cb6721cf_10000000, "initializeMap", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "startMapping")) {

    _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_30000000, "startMapping", 13, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "stopMapping")) {

    _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_40000000, "stopMapping", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "suspendMapping")) {

    _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_50000000, "suspendMapping", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "resumeMapping")) {

    _0RL_cd_be987840cb6721cf_20000000 _call_desc(_0RL_lcfn_be987840cb6721cf_60000000, "resumeMapping", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getState")) {

    _0RL_cd_be987840cb6721cf_70000000 _call_desc(_0RL_lcfn_be987840cb6721cf_80000000, "getState", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "requestCurrentBuiltMap")) {

    _0RL_cd_be987840cb6721cf_90000000 _call_desc(_0RL_lcfn_be987840cb6721cf_a0000000, "requestCurrentBuiltMap", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_OGMapper::_ptrToInterface(const char* id)
{
  if (id == ::RTC::OGMapper::_PD_repoId)
    return (::RTC::_impl_OGMapper*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::RTC::OGMapper::_PD_repoId))
    return (::RTC::_impl_OGMapper*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_OGMapper::_mostDerivedRepoId()
{
  return ::RTC::OGMapper::_PD_repoId;
}

RTC::OGMapServer_ptr RTC::OGMapServer_Helper::_nil() {
  return ::RTC::OGMapServer::_nil();
}

::CORBA::Boolean RTC::OGMapServer_Helper::is_nil(::RTC::OGMapServer_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::OGMapServer_Helper::release(::RTC::OGMapServer_ptr p) {
  ::CORBA::release(p);
}

void RTC::OGMapServer_Helper::marshalObjRef(::RTC::OGMapServer_ptr obj, cdrStream& s) {
  ::RTC::OGMapServer::_marshalObjRef(obj, s);
}

RTC::OGMapServer_ptr RTC::OGMapServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::OGMapServer::_unmarshalObjRef(s);
}

void RTC::OGMapServer_Helper::duplicate(::RTC::OGMapServer_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

RTC::OGMapServer_ptr
RTC::OGMapServer::_duplicate(::RTC::OGMapServer_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

RTC::OGMapServer_ptr
RTC::OGMapServer::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::OGMapServer_ptr
RTC::OGMapServer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::OGMapServer_ptr
RTC::OGMapServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_OGMapServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_OGMapServer* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_OGMapServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::OGMapServer::_PD_repoId = "IDL:RTC/OGMapServer:1.0";


RTC::_objref_OGMapServer::~_objref_OGMapServer() {
  
}


RTC::_objref_OGMapServer::_objref_OGMapServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::OGMapServer::_PD_repoId, ior, id, 1)
   ,
   _shortcut(0)
{
  _PR_setobj(this);
}

void*
RTC::_objref_OGMapServer::_ptrToObjRef(const char* id)
{
  if (id == ::RTC::OGMapServer::_PD_repoId)
    return (::RTC::OGMapServer_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::RTC::OGMapServer::_PD_repoId))
    return (::RTC::OGMapServer_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void
RTC::_objref_OGMapServer::_enableShortcut(omniServant* _svt, const _CORBA_Boolean* _inv)
{
  if (_svt)
    _shortcut = (_impl_OGMapServer*)_svt->_ptrToInterface(::RTC::OGMapServer::_PD_repoId);
  else
    _shortcut = 0;
  _invalid  = _inv;
  
}


//
// Code for RTC::OGMapServer::requestCurrentBuiltMap

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_90000000* tcd = (_0RL_cd_be987840cb6721cf_90000000*)cd;
  RTC::_impl_OGMapServer* impl = (RTC::_impl_OGMapServer*) svnt->_ptrToInterface(RTC::OGMapServer::_PD_repoId);
  tcd->result = impl->requestCurrentBuiltMap(tcd->arg_0.out());


}

RTC::RETURN_VALUE RTC::_objref_OGMapServer::requestCurrentBuiltMap(::RTC::OGMap_out map)
{
  _impl_OGMapServer* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->requestCurrentBuiltMap(map);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_90000000 _call_desc(_0RL_lcfn_be987840cb6721cf_b0000000, "requestCurrentBuiltMap", 23);


  _invoke(_call_desc);
  map = _call_desc.arg_0._retn();
  return _call_desc.result;


}

RTC::_pof_OGMapServer::~_pof_OGMapServer() {}


omniObjRef*
RTC::_pof_OGMapServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_OGMapServer(ior, id);
}


::CORBA::Boolean
RTC::_pof_OGMapServer::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::RTC::OGMapServer::_PD_repoId))
    return 1;
  
  return 0;
}

const RTC::_pof_OGMapServer _the_pof_RTC_mOGMapServer;

RTC::_impl_OGMapServer::~_impl_OGMapServer() {}


::CORBA::Boolean
RTC::_impl_OGMapServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "requestCurrentBuiltMap")) {

    _0RL_cd_be987840cb6721cf_90000000 _call_desc(_0RL_lcfn_be987840cb6721cf_b0000000, "requestCurrentBuiltMap", 23, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_OGMapServer::_ptrToInterface(const char* id)
{
  if (id == ::RTC::OGMapServer::_PD_repoId)
    return (::RTC::_impl_OGMapServer*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::RTC::OGMapServer::_PD_repoId))
    return (::RTC::_impl_OGMapServer*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_OGMapServer::_mostDerivedRepoId()
{
  return ::RTC::OGMapServer::_PD_repoId;
}

void
RTC::PathPlanParameter::operator>>= (cdrStream &_n) const
{
  (const OGMap&) map >>= _n;
  (const Pose2D&) targetPose >>= _n;
  (const Pose2D&) currentPose >>= _n;
  distanceTolerance >>= _n;
  headingTolerance >>= _n;
  (const Time&) timeLimit >>= _n;
  (const Velocity2D&) maxSpeed >>= _n;

}

void
RTC::PathPlanParameter::operator<<= (cdrStream &_n)
{
  (OGMap&)map <<= _n;
  (Pose2D&)targetPose <<= _n;
  (Pose2D&)currentPose <<= _n;
  (::CORBA::Double&)distanceTolerance <<= _n;
  (::CORBA::Double&)headingTolerance <<= _n;
  (Time&)timeLimit <<= _n;
  (Velocity2D&)maxSpeed <<= _n;

}

RTC::PathPlanner_ptr RTC::PathPlanner_Helper::_nil() {
  return ::RTC::PathPlanner::_nil();
}

::CORBA::Boolean RTC::PathPlanner_Helper::is_nil(::RTC::PathPlanner_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::PathPlanner_Helper::release(::RTC::PathPlanner_ptr p) {
  ::CORBA::release(p);
}

void RTC::PathPlanner_Helper::marshalObjRef(::RTC::PathPlanner_ptr obj, cdrStream& s) {
  ::RTC::PathPlanner::_marshalObjRef(obj, s);
}

RTC::PathPlanner_ptr RTC::PathPlanner_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::PathPlanner::_unmarshalObjRef(s);
}

void RTC::PathPlanner_Helper::duplicate(::RTC::PathPlanner_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

RTC::PathPlanner_ptr
RTC::PathPlanner::_duplicate(::RTC::PathPlanner_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

RTC::PathPlanner_ptr
RTC::PathPlanner::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::PathPlanner_ptr
RTC::PathPlanner::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::PathPlanner_ptr
RTC::PathPlanner::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PathPlanner _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PathPlanner* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_PathPlanner;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::PathPlanner::_PD_repoId = "IDL:RTC/PathPlanner:1.0";


RTC::_objref_PathPlanner::~_objref_PathPlanner() {
  
}


RTC::_objref_PathPlanner::_objref_PathPlanner(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::PathPlanner::_PD_repoId, ior, id, 1)
   ,
   _shortcut(0)
{
  _PR_setobj(this);
}

void*
RTC::_objref_PathPlanner::_ptrToObjRef(const char* id)
{
  if (id == ::RTC::PathPlanner::_PD_repoId)
    return (::RTC::PathPlanner_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::RTC::PathPlanner::_PD_repoId))
    return (::RTC::PathPlanner_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void
RTC::_objref_PathPlanner::_enableShortcut(omniServant* _svt, const _CORBA_Boolean* _inv)
{
  if (_svt)
    _shortcut = (_impl_PathPlanner*)_svt->_ptrToInterface(::RTC::PathPlanner::_PD_repoId);
  else
    _shortcut = 0;
  _invalid  = _inv;
  
}


//
// Code for RTC::PathPlanner::planPath

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE_i_cRTC_mPathPlanParameter_o_cRTC_mPath2D
class _0RL_cd_be987840cb6721cf_c0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_c0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::PathPlanParameter_var arg_0_;
  const RTC::PathPlanParameter* arg_0;
  RTC::Path2D_var arg_1;
  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_c0000000::marshalArguments(cdrStream& _n)
{
  (const RTC::PathPlanParameter&) *arg_0 >>= _n;

}

void _0RL_cd_be987840cb6721cf_c0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new RTC::PathPlanParameter;
  (RTC::PathPlanParameter&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_be987840cb6721cf_c0000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  (const RTC::Path2D&) arg_1 >>= _n;

}

void _0RL_cd_be987840cb6721cf_c0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;
  arg_1 = new RTC::Path2D;
  (RTC::Path2D&)arg_1 <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_c0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_d0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_c0000000* tcd = (_0RL_cd_be987840cb6721cf_c0000000*)cd;
  RTC::_impl_PathPlanner* impl = (RTC::_impl_PathPlanner*) svnt->_ptrToInterface(RTC::PathPlanner::_PD_repoId);
  tcd->result = impl->planPath(*tcd->arg_0, tcd->arg_1.out());


}

RTC::RETURN_VALUE RTC::_objref_PathPlanner::planPath(const ::RTC::PathPlanParameter& param, ::RTC::Path2D_out outPath)
{
  _impl_PathPlanner* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->planPath(param, outPath);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_c0000000 _call_desc(_0RL_lcfn_be987840cb6721cf_d0000000, "planPath", 9);
  _call_desc.arg_0 = &(::RTC::PathPlanParameter&) param;

  _invoke(_call_desc);
  outPath = _call_desc.arg_1._retn();
  return _call_desc.result;


}

RTC::_pof_PathPlanner::~_pof_PathPlanner() {}


omniObjRef*
RTC::_pof_PathPlanner::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_PathPlanner(ior, id);
}


::CORBA::Boolean
RTC::_pof_PathPlanner::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::RTC::PathPlanner::_PD_repoId))
    return 1;
  
  return 0;
}

const RTC::_pof_PathPlanner _the_pof_RTC_mPathPlanner;

RTC::_impl_PathPlanner::~_impl_PathPlanner() {}


::CORBA::Boolean
RTC::_impl_PathPlanner::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "planPath")) {

    _0RL_cd_be987840cb6721cf_c0000000 _call_desc(_0RL_lcfn_be987840cb6721cf_d0000000, "planPath", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_PathPlanner::_ptrToInterface(const char* id)
{
  if (id == ::RTC::PathPlanner::_PD_repoId)
    return (::RTC::_impl_PathPlanner*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::RTC::PathPlanner::_PD_repoId))
    return (::RTC::_impl_PathPlanner*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_PathPlanner::_mostDerivedRepoId()
{
  return ::RTC::PathPlanner::_PD_repoId;
}

RTC::PathFollower_ptr RTC::PathFollower_Helper::_nil() {
  return ::RTC::PathFollower::_nil();
}

::CORBA::Boolean RTC::PathFollower_Helper::is_nil(::RTC::PathFollower_ptr p) {
  return ::CORBA::is_nil(p);

}

void RTC::PathFollower_Helper::release(::RTC::PathFollower_ptr p) {
  ::CORBA::release(p);
}

void RTC::PathFollower_Helper::marshalObjRef(::RTC::PathFollower_ptr obj, cdrStream& s) {
  ::RTC::PathFollower::_marshalObjRef(obj, s);
}

RTC::PathFollower_ptr RTC::PathFollower_Helper::unmarshalObjRef(cdrStream& s) {
  return ::RTC::PathFollower::_unmarshalObjRef(s);
}

void RTC::PathFollower_Helper::duplicate(::RTC::PathFollower_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

RTC::PathFollower_ptr
RTC::PathFollower::_duplicate(::RTC::PathFollower_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

RTC::PathFollower_ptr
RTC::PathFollower::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


RTC::PathFollower_ptr
RTC::PathFollower::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

RTC::PathFollower_ptr
RTC::PathFollower::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PathFollower _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PathFollower* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_PathFollower;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* RTC::PathFollower::_PD_repoId = "IDL:RTC/PathFollower:1.0";


RTC::_objref_PathFollower::~_objref_PathFollower() {
  
}


RTC::_objref_PathFollower::_objref_PathFollower(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::RTC::PathFollower::_PD_repoId, ior, id, 1)
   ,
   _shortcut(0)
{
  _PR_setobj(this);
}

void*
RTC::_objref_PathFollower::_ptrToObjRef(const char* id)
{
  if (id == ::RTC::PathFollower::_PD_repoId)
    return (::RTC::PathFollower_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::RTC::PathFollower::_PD_repoId))
    return (::RTC::PathFollower_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}

void
RTC::_objref_PathFollower::_enableShortcut(omniServant* _svt, const _CORBA_Boolean* _inv)
{
  if (_svt)
    _shortcut = (_impl_PathFollower*)_svt->_ptrToInterface(::RTC::PathFollower::_PD_repoId);
  else
    _shortcut = 0;
  _invalid  = _inv;
  
}


//
// Code for RTC::PathFollower::followPath

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE_i_cRTC_mPath2D
class _0RL_cd_be987840cb6721cf_e0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_e0000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::Path2D_var arg_0_;
  const RTC::Path2D* arg_0;
  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_e0000000::marshalArguments(cdrStream& _n)
{
  (const RTC::Path2D&) *arg_0 >>= _n;

}

void _0RL_cd_be987840cb6721cf_e0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new RTC::Path2D;
  (RTC::Path2D&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_be987840cb6721cf_e0000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_be987840cb6721cf_e0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_e0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_e0000000* tcd = (_0RL_cd_be987840cb6721cf_e0000000*)cd;
  RTC::_impl_PathFollower* impl = (RTC::_impl_PathFollower*) svnt->_ptrToInterface(RTC::PathFollower::_PD_repoId);
  tcd->result = impl->followPath(*tcd->arg_0);


}

RTC::RETURN_VALUE RTC::_objref_PathFollower::followPath(const ::RTC::Path2D& path)
{
  _impl_PathFollower* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->followPath(path);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_e0000000 _call_desc(_0RL_lcfn_be987840cb6721cf_f0000000, "followPath", 11);
  _call_desc.arg_0 = &(::RTC::Path2D&) path;

  _invoke(_call_desc);
  return _call_desc.result;


}


//
// Code for RTC::PathFollower::getState

// Proxy call descriptor class. Mangled signature:
//  _cRTC_mRETURN__VALUE_o_cRTC_mFOLLOWER__STATE
class _0RL_cd_be987840cb6721cf_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_be987840cb6721cf_01000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  RTC::FOLLOWER_STATE arg_0;
  RTC::RETURN_VALUE result;
};

void _0RL_cd_be987840cb6721cf_01000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;
  arg_0 >>= _n;

}

void _0RL_cd_be987840cb6721cf_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  (RTC::RETURN_VALUE&)result <<= _n;
  (RTC::FOLLOWER_STATE&)arg_0 <<= _n;

}

const char* const _0RL_cd_be987840cb6721cf_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_01000000* tcd = (_0RL_cd_be987840cb6721cf_01000000*)cd;
  RTC::_impl_PathFollower* impl = (RTC::_impl_PathFollower*) svnt->_ptrToInterface(RTC::PathFollower::_PD_repoId);
  tcd->result = impl->getState(tcd->arg_0);


}

RTC::RETURN_VALUE RTC::_objref_PathFollower::getState(::RTC::FOLLOWER_STATE& state)
{
  _impl_PathFollower* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->getState(state);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_01000000 _call_desc(_0RL_lcfn_be987840cb6721cf_11000000, "getState", 9);


  _invoke(_call_desc);
  state = _call_desc.arg_0;
  return _call_desc.result;


}


//
// Code for RTC::PathFollower::followPathNonBlock

// Local call call-back function.
static void
_0RL_lcfn_be987840cb6721cf_21000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_be987840cb6721cf_e0000000* tcd = (_0RL_cd_be987840cb6721cf_e0000000*)cd;
  RTC::_impl_PathFollower* impl = (RTC::_impl_PathFollower*) svnt->_ptrToInterface(RTC::PathFollower::_PD_repoId);
  tcd->result = impl->followPathNonBlock(*tcd->arg_0);


}

RTC::RETURN_VALUE RTC::_objref_PathFollower::followPathNonBlock(const ::RTC::Path2D& path)
{
  _impl_PathFollower* _s = _shortcut;
  if (_s) {
    if (!*_invalid) {
      return _s->followPathNonBlock(path);
    }
    else {
      _enableShortcut(0,0);
      // drop through to normal invoke
    }
  }
  _0RL_cd_be987840cb6721cf_e0000000 _call_desc(_0RL_lcfn_be987840cb6721cf_21000000, "followPathNonBlock", 19);
  _call_desc.arg_0 = &(::RTC::Path2D&) path;

  _invoke(_call_desc);
  return _call_desc.result;


}

RTC::_pof_PathFollower::~_pof_PathFollower() {}


omniObjRef*
RTC::_pof_PathFollower::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::RTC::_objref_PathFollower(ior, id);
}


::CORBA::Boolean
RTC::_pof_PathFollower::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::RTC::PathFollower::_PD_repoId))
    return 1;
  
  return 0;
}

const RTC::_pof_PathFollower _the_pof_RTC_mPathFollower;

RTC::_impl_PathFollower::~_impl_PathFollower() {}


::CORBA::Boolean
RTC::_impl_PathFollower::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "followPath")) {

    _0RL_cd_be987840cb6721cf_e0000000 _call_desc(_0RL_lcfn_be987840cb6721cf_f0000000, "followPath", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "getState")) {

    _0RL_cd_be987840cb6721cf_01000000 _call_desc(_0RL_lcfn_be987840cb6721cf_11000000, "getState", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if (omni::strMatch(op, "followPathNonBlock")) {

    _0RL_cd_be987840cb6721cf_e0000000 _call_desc(_0RL_lcfn_be987840cb6721cf_21000000, "followPathNonBlock", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
RTC::_impl_PathFollower::_ptrToInterface(const char* id)
{
  if (id == ::RTC::PathFollower::_PD_repoId)
    return (::RTC::_impl_PathFollower*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::RTC::PathFollower::_PD_repoId))
    return (::RTC::_impl_PathFollower*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
RTC::_impl_PathFollower::_mostDerivedRepoId()
{
  return ::RTC::PathFollower::_PD_repoId;
}

POA_RTC::OGMapper::~OGMapper() {}

POA_RTC::OGMapServer::~OGMapServer() {}

POA_RTC::PathPlanner::~PathPlanner() {}

POA_RTC::PathFollower::~PathFollower() {}


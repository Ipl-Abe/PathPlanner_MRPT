// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __MobileRobot_hh__
#define __MobileRobot_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_MobileRobot
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_MobileRobot
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_MobileRobot
#endif



#ifndef __BasicDataType_hh_EXTERNAL_GUARD__
#define __BasicDataType_hh_EXTERNAL_GUARD__
#include <BasicDataType.hh>
#endif
#ifndef __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#define __ExtendedDataTypes_hh_EXTERNAL_GUARD__
#include <ExtendedDataTypes.hh>
#endif
#ifndef __InterfaceDataTypes_hh_EXTERNAL_GUARD__
#define __InterfaceDataTypes_hh_EXTERNAL_GUARD__
#include <InterfaceDataTypes.hh>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE RTC

_CORBA_MODULE_BEG

  struct OGMap {
    typedef _CORBA_ConstrType_Variable_Var<OGMap> _var_type;

    
    Time tm;

    OGMapConfig config;

    OGMapTile map;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef OGMap::_var_type OGMap_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< OGMap,OGMap_var > OGMap_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OGMap;

  enum RETURN_VALUE { RETVAL_OK, RETVAL_INVALID_PARAMETER, RETVAL_EMPTY_MAP, RETVAL_INVALID_PRECONDITION, RETVAL_NOT_IMPL, RETVAL_UNKNOWN_ERROR, RETVAL_NOT_FOUND, RETVAL_ODOMETRY_INVALID_VALUE, RETVAL_ODOMETRY_TIME_OUT, RETVAL_RANGE_INVALID_VALUE, RETVAL_RANGE_TIME_OUT, RETVAL_EMERGENCY_STOP, RETVAL_OUTOF_RANGE /*, __max_RETURN_VALUE=0xffffffff */ };
  typedef RETURN_VALUE& RETURN_VALUE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RETURN_VALUE;

  enum MAPPER_STATE { MAPPER_STOPPED, MAPPER_MAPPING, MAPPER_SUSPEND, MAPPER_ERROR, MAPPER_UNKNOWN /*, __max_MAPPER_STATE=0xffffffff */ };
  typedef MAPPER_STATE& MAPPER_STATE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MAPPER_STATE;

  enum FOLLOWER_STATE { FOLLOWER_STOPPED, FOLLOWER_FOLLOWING, FOLLOWER_SUSPEND, FOLLOWER_ERROR, FOLLOWER_UNKNOWN /*, __max_FOLLOWER_STATE=0xffffffff */ };
  typedef FOLLOWER_STATE& FOLLOWER_STATE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_FOLLOWER_STATE;

#ifndef __RTC_mOGMapper__
#define __RTC_mOGMapper__
  class OGMapper;
  class _objref_OGMapper;
  class _impl_OGMapper;
  
  typedef _objref_OGMapper* OGMapper_ptr;
  typedef OGMapper_ptr OGMapperRef;

  class OGMapper_Helper {
  public:
    typedef OGMapper_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_OGMapper, OGMapper_Helper> OGMapper_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_OGMapper,OGMapper_Helper > OGMapper_out;

#endif

  // interface OGMapper
  class OGMapper {
  public:
    // Declarations for this interface type.
    typedef OGMapper_ptr _ptr_type;
    typedef OGMapper_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_OGMapper :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    RETURN_VALUE initializeMap(const ::RTC::OGMapConfig& config, const ::RTC::Pose2D& initialPose);
    RETURN_VALUE startMapping();
    RETURN_VALUE stopMapping();
    RETURN_VALUE suspendMapping();
    RETURN_VALUE resumeMapping();
    RETURN_VALUE getState(::RTC::MAPPER_STATE& state);
    RETURN_VALUE requestCurrentBuiltMap(::RTC::OGMap_out map);

    // Constructors
    inline _objref_OGMapper() : _shortcut(0) { _PR_setobj(0); }  // nil
    _objref_OGMapper(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_OGMapper();

    virtual void _enableShortcut(omniServant*, const _CORBA_Boolean*);
    _impl_OGMapper* _shortcut;
    const _CORBA_Boolean* _invalid;
  
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_OGMapper(const _objref_OGMapper&);
    _objref_OGMapper& operator = (const _objref_OGMapper&);
    // not implemented

    friend class OGMapper;
  };

  class _pof_OGMapper : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_OGMapper() : _OMNI_NS(proxyObjectFactory)(OGMapper::_PD_repoId) {}
    virtual ~_pof_OGMapper();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_OGMapper :
    public virtual omniServant
  {
  public:
    virtual ~_impl_OGMapper();

    virtual RETURN_VALUE initializeMap(const ::RTC::OGMapConfig& config, const ::RTC::Pose2D& initialPose) = 0;
    virtual RETURN_VALUE startMapping() = 0;
    virtual RETURN_VALUE stopMapping() = 0;
    virtual RETURN_VALUE suspendMapping() = 0;
    virtual RETURN_VALUE resumeMapping() = 0;
    virtual RETURN_VALUE getState(::RTC::MAPPER_STATE& state) = 0;
    virtual RETURN_VALUE requestCurrentBuiltMap(::RTC::OGMap_out map) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OGMapper;

#ifndef __RTC_mOGMapServer__
#define __RTC_mOGMapServer__
  class OGMapServer;
  class _objref_OGMapServer;
  class _impl_OGMapServer;
  
  typedef _objref_OGMapServer* OGMapServer_ptr;
  typedef OGMapServer_ptr OGMapServerRef;

  class OGMapServer_Helper {
  public:
    typedef OGMapServer_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_OGMapServer, OGMapServer_Helper> OGMapServer_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_OGMapServer,OGMapServer_Helper > OGMapServer_out;

#endif

  // interface OGMapServer
  class OGMapServer {
  public:
    // Declarations for this interface type.
    typedef OGMapServer_ptr _ptr_type;
    typedef OGMapServer_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_OGMapServer :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    RETURN_VALUE requestCurrentBuiltMap(::RTC::OGMap_out map);

    // Constructors
    inline _objref_OGMapServer() : _shortcut(0) { _PR_setobj(0); }  // nil
    _objref_OGMapServer(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_OGMapServer();

    virtual void _enableShortcut(omniServant*, const _CORBA_Boolean*);
    _impl_OGMapServer* _shortcut;
    const _CORBA_Boolean* _invalid;
  
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_OGMapServer(const _objref_OGMapServer&);
    _objref_OGMapServer& operator = (const _objref_OGMapServer&);
    // not implemented

    friend class OGMapServer;
  };

  class _pof_OGMapServer : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_OGMapServer() : _OMNI_NS(proxyObjectFactory)(OGMapServer::_PD_repoId) {}
    virtual ~_pof_OGMapServer();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_OGMapServer :
    public virtual omniServant
  {
  public:
    virtual ~_impl_OGMapServer();

    virtual RETURN_VALUE requestCurrentBuiltMap(::RTC::OGMap_out map) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OGMapServer;

  struct PathPlanParameter {
    typedef _CORBA_ConstrType_Variable_Var<PathPlanParameter> _var_type;

    
    OGMap map;

    Pose2D targetPose;

    Pose2D currentPose;

    ::CORBA::Double distanceTolerance;

    ::CORBA::Double headingTolerance;

    Time timeLimit;

    Velocity2D maxSpeed;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PathPlanParameter::_var_type PathPlanParameter_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PathPlanParameter,PathPlanParameter_var > PathPlanParameter_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PathPlanParameter;

#ifndef __RTC_mPathPlanner__
#define __RTC_mPathPlanner__
  class PathPlanner;
  class _objref_PathPlanner;
  class _impl_PathPlanner;
  
  typedef _objref_PathPlanner* PathPlanner_ptr;
  typedef PathPlanner_ptr PathPlannerRef;

  class PathPlanner_Helper {
  public:
    typedef PathPlanner_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_PathPlanner, PathPlanner_Helper> PathPlanner_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_PathPlanner,PathPlanner_Helper > PathPlanner_out;

#endif

  // interface PathPlanner
  class PathPlanner {
  public:
    // Declarations for this interface type.
    typedef PathPlanner_ptr _ptr_type;
    typedef PathPlanner_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_PathPlanner :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    RETURN_VALUE planPath(const ::RTC::PathPlanParameter& param, ::RTC::Path2D_out outPath);

    // Constructors
    inline _objref_PathPlanner() : _shortcut(0) { _PR_setobj(0); }  // nil
    _objref_PathPlanner(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_PathPlanner();

    virtual void _enableShortcut(omniServant*, const _CORBA_Boolean*);
    _impl_PathPlanner* _shortcut;
    const _CORBA_Boolean* _invalid;
  
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_PathPlanner(const _objref_PathPlanner&);
    _objref_PathPlanner& operator = (const _objref_PathPlanner&);
    // not implemented

    friend class PathPlanner;
  };

  class _pof_PathPlanner : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_PathPlanner() : _OMNI_NS(proxyObjectFactory)(PathPlanner::_PD_repoId) {}
    virtual ~_pof_PathPlanner();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_PathPlanner :
    public virtual omniServant
  {
  public:
    virtual ~_impl_PathPlanner();

    virtual RETURN_VALUE planPath(const ::RTC::PathPlanParameter& param, ::RTC::Path2D_out outPath) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PathPlanner;

#ifndef __RTC_mPathFollower__
#define __RTC_mPathFollower__
  class PathFollower;
  class _objref_PathFollower;
  class _impl_PathFollower;
  
  typedef _objref_PathFollower* PathFollower_ptr;
  typedef PathFollower_ptr PathFollowerRef;

  class PathFollower_Helper {
  public:
    typedef PathFollower_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_PathFollower, PathFollower_Helper> PathFollower_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_PathFollower,PathFollower_Helper > PathFollower_out;

#endif

  // interface PathFollower
  class PathFollower {
  public:
    // Declarations for this interface type.
    typedef PathFollower_ptr _ptr_type;
    typedef PathFollower_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_PathFollower :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    RETURN_VALUE followPath(const ::RTC::Path2D& path);
    RETURN_VALUE getState(::RTC::FOLLOWER_STATE& state);
    RETURN_VALUE followPathNonBlock(const ::RTC::Path2D& path);

    // Constructors
    inline _objref_PathFollower() : _shortcut(0) { _PR_setobj(0); }  // nil
    _objref_PathFollower(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_PathFollower();

    virtual void _enableShortcut(omniServant*, const _CORBA_Boolean*);
    _impl_PathFollower* _shortcut;
    const _CORBA_Boolean* _invalid;
  
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_PathFollower(const _objref_PathFollower&);
    _objref_PathFollower& operator = (const _objref_PathFollower&);
    // not implemented

    friend class PathFollower;
  };

  class _pof_PathFollower : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_PathFollower() : _OMNI_NS(proxyObjectFactory)(PathFollower::_PD_repoId) {}
    virtual ~_pof_PathFollower();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_PathFollower :
    public virtual omniServant
  {
  public:
    virtual ~_impl_PathFollower();

    virtual RETURN_VALUE followPath(const ::RTC::Path2D& path) = 0;
    virtual RETURN_VALUE getState(::RTC::FOLLOWER_STATE& state) = 0;
    virtual RETURN_VALUE followPathNonBlock(const ::RTC::Path2D& path) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PathFollower;

_CORBA_MODULE_END



_CORBA_MODULE POA_RTC
_CORBA_MODULE_BEG

  class OGMapper :
    public virtual RTC::_impl_OGMapper,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~OGMapper();

    inline ::RTC::OGMapper_ptr _this() {
      return (::RTC::OGMapper_ptr) _do_this(::RTC::OGMapper::_PD_repoId);
    }
  };

  class OGMapServer :
    public virtual RTC::_impl_OGMapServer,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~OGMapServer();

    inline ::RTC::OGMapServer_ptr _this() {
      return (::RTC::OGMapServer_ptr) _do_this(::RTC::OGMapServer::_PD_repoId);
    }
  };

  class PathPlanner :
    public virtual RTC::_impl_PathPlanner,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~PathPlanner();

    inline ::RTC::PathPlanner_ptr _this() {
      return (::RTC::PathPlanner_ptr) _do_this(::RTC::PathPlanner::_PD_repoId);
    }
  };

  class PathFollower :
    public virtual RTC::_impl_PathFollower,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~PathFollower();

    inline ::RTC::PathFollower_ptr _this() {
      return (::RTC::PathFollower_ptr) _do_this(::RTC::PathFollower::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTC
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const RTC::OGMap& _s);
extern void operator<<=(::CORBA::Any& _a, RTC::OGMap* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::OGMap*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTC::OGMap*& _sp);

inline void operator >>=(RTC::RETURN_VALUE _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTC::RETURN_VALUE& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTC::RETVAL_OUTOF_RANGE) {
    _e = (RTC::RETURN_VALUE) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTC::RETURN_VALUE _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::RETURN_VALUE& _s);

inline void operator >>=(RTC::MAPPER_STATE _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTC::MAPPER_STATE& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTC::MAPPER_UNKNOWN) {
    _e = (RTC::MAPPER_STATE) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTC::MAPPER_STATE _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::MAPPER_STATE& _s);

inline void operator >>=(RTC::FOLLOWER_STATE _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTC::FOLLOWER_STATE& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTC::FOLLOWER_UNKNOWN) {
    _e = (RTC::FOLLOWER_STATE) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTC::FOLLOWER_STATE _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::FOLLOWER_STATE& _s);

void operator<<=(::CORBA::Any& _a, RTC::OGMapper_ptr _s);
void operator<<=(::CORBA::Any& _a, RTC::OGMapper_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::OGMapper_ptr& _s);

void operator<<=(::CORBA::Any& _a, RTC::OGMapServer_ptr _s);
void operator<<=(::CORBA::Any& _a, RTC::OGMapServer_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::OGMapServer_ptr& _s);

extern void operator<<=(::CORBA::Any& _a, const RTC::PathPlanParameter& _s);
extern void operator<<=(::CORBA::Any& _a, RTC::PathPlanParameter* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::PathPlanParameter*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTC::PathPlanParameter*& _sp);

void operator<<=(::CORBA::Any& _a, RTC::PathPlanner_ptr _s);
void operator<<=(::CORBA::Any& _a, RTC::PathPlanner_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::PathPlanner_ptr& _s);

void operator<<=(::CORBA::Any& _a, RTC::PathFollower_ptr _s);
void operator<<=(::CORBA::Any& _a, RTC::PathFollower_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTC::PathFollower_ptr& _s);



inline void
RTC::OGMapper::_marshalObjRef(::RTC::OGMapper_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
RTC::OGMapServer::_marshalObjRef(::RTC::OGMapServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
RTC::PathPlanner::_marshalObjRef(::RTC::PathPlanner_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
RTC::PathFollower::_marshalObjRef(::RTC::PathFollower_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_MobileRobot
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_MobileRobot
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_MobileRobot
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_MobileRobot
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_MobileRobot
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_MobileRobot
#endif

#endif  // __MobileRobot_hh__

